# Generated by Django 2.2 on 2020-03-24 12:18

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='样本ID')),
                ('dissection_state', models.CharField(blank=True, choices=[('活', '活'), ('死', '死'), ('未知', '未知')], max_length=20, null=True, verbose_name='解剖前状态')),
                ('multi_or_not', models.BooleanField(default=False, verbose_name='是否多只同管')),
                ('multi_num', models.IntegerField(blank=True, null=True, verbose_name='同管样本数量')),
                ('sample_box_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='蜜蜂样本盒子ID')),
                ('headchest_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='头胸部ID')),
                ('headchest_store', models.CharField(blank=True, choices=[('未保存', '未保存'), ('直接冻存', '直接冻存'), ('95%酒精', '95%酒精'), ('甘油', '甘油'), ('RNAlater', 'RNAlater'), ('针插标本', '针插标本')], max_length=20, null=True, verbose_name='头胸部存储')),
                ('headchest_usage', models.CharField(blank=True, max_length=50, null=True, verbose_name='头胸部使用情况')),
                ('abdomen_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='腹部ID')),
                ('abdomen_store', models.CharField(blank=True, choices=[('未保存', '未保存'), ('直接冻存', '直接冻存'), ('95%酒精', '95%酒精'), ('RNAlater', 'RNAlater'), ('shiled', 'shiled')], max_length=20, null=True, verbose_name='腹部存储')),
                ('abdomen_usage', models.CharField(blank=True, max_length=50, null=True, verbose_name='腹部使用情况')),
                ('gut_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='肠道ID')),
                ('gut_store', models.CharField(blank=True, choices=[('未保存', '未保存'), ('直接冻存', '直接冻存'), ('95%酒精', '95%酒精'), ('RNAlater', 'RNAlater'), ('shiled', 'shiled'), ('25%甘油', '25%甘油')], max_length=20, null=True, verbose_name='肠道存储')),
                ('gut_usage', models.CharField(blank=True, max_length=50, null=True, verbose_name='肠道使用情况')),
                ('leg_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='腿部ID')),
                ('leg_store', models.CharField(blank=True, choices=[('未保存', '未保存'), ('直接冻存', '直接冻存'), ('95%酒精', '95%酒精'), ('RNAlater', 'RNAlater'), ('shiled', 'shiled'), ('25%甘油', '25%甘油')], max_length=20, null=True, verbose_name='腿部存储')),
                ('leg_usage', models.CharField(blank=True, max_length=50, null=True, verbose_name='腿部使用情况')),
                ('sample_phylum', models.CharField(blank=True, max_length=50, null=True, verbose_name='门')),
                ('sample_class', models.CharField(blank=True, max_length=50, null=True, verbose_name='纲')),
                ('sample_order', models.CharField(blank=True, max_length=50, null=True, verbose_name='目')),
                ('sample_family', models.CharField(blank=True, max_length=50, null=True, verbose_name='科')),
                ('sample_genus', models.CharField(blank=True, max_length=50, null=True, verbose_name='属')),
                ('sample_species', models.CharField(blank=True, max_length=50, null=True, verbose_name='种')),
                ('sample_subspecies', models.CharField(blank=True, max_length=50, null=True, verbose_name='亚种')),
                ('sample_breed', models.CharField(blank=True, max_length=50, null=True, verbose_name='品种')),
                ('identifier_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='鉴定人姓名')),
                ('identifier_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='鉴定人邮箱')),
                ('identifier_institution', models.CharField(blank=True, max_length=254, null=True, verbose_name='鉴定人工作单位')),
                ('barcode_result', models.CharField(blank=True, max_length=254, null=True, verbose_name='barcode信息')),
                ('exact_site', models.CharField(blank=True, max_length=100, null=True, verbose_name='确切地址')),
                ('continent_ocean', models.CharField(blank=True, max_length=20, null=True, verbose_name='大陆/大洋')),
                ('country', models.CharField(blank=True, max_length=20, null=True, verbose_name='国家')),
                ('state_province', models.CharField(blank=True, max_length=50, null=True, verbose_name='州/省')),
                ('city', models.CharField(blank=True, max_length=20, null=True, verbose_name='城市')),
                ('county', models.CharField(blank=True, max_length=20, null=True, verbose_name='县')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='纬度')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='经度')),
                ('elevation', models.IntegerField(blank=True, null=True, verbose_name='海拔')),
                ('geo_notes', models.TextField(blank=True, null=True, verbose_name='地理位置补充描述')),
                ('collector_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='采集人姓名')),
                ('collection_date', models.DateField(blank=True, null=True, verbose_name='采集日期')),
                ('bee_type', models.CharField(blank=True, choices=[('drone', 'drone'), ('worker', 'worker'), ('queen', 'queen'), ('male', 'male'), ('female', 'female'), ('unknown', 'unknown')], max_length=20, null=True, verbose_name='蜜蜂类型')),
                ('life_style', models.CharField(blank=True, choices=[('活框', '活框'), ('木桶', '木桶'), ('wild', 'wild'), ('unknown', 'unknown')], max_length=20, null=True, verbose_name='饲养方式')),
                ('life_stage', models.CharField(blank=True, choices=[('adult', 'adult'), ('larva', 'larva'), ('pupo', 'pupo')], max_length=20, null=True, verbose_name='个体阶段')),
                ('beekeeper', models.CharField(blank=True, max_length=50, null=True, verbose_name='养蜂人信息')),
                ('apiary_id', models.IntegerField(blank=True, null=True, verbose_name='蜂场号-整数ID')),
                ('hive_id', models.IntegerField(blank=True, null=True, verbose_name='蜂箱号-整数ID')),
                ('host_origin', models.CharField(blank=True, max_length=50, null=True, verbose_name='蜜蜂来源')),
                ('hive_year', models.IntegerField(blank=True, null=True, verbose_name='蜂箱年数')),
                ('decapping_freq', models.CharField(blank=True, max_length=50, null=True, verbose_name='取蜜频率')),
                ('feeding_or_not', models.BooleanField(blank=True, null=True, verbose_name='是否喂糖水')),
                ('feeding_description', models.TextField(blank=True, null=True, verbose_name='喂糖水描述')),
                ('habitat_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='生境信息')),
                ('habitat_photo_filename', models.CharField(blank=True, max_length=50, null=True, verbose_name='生境照片文件名')),
                ('presticide_or_not', models.BooleanField(blank=True, null=True, verbose_name='有无农药')),
                ('flower_species', models.CharField(blank=True, max_length=50, null=True, verbose_name='访花种类')),
                ('flower_photo_filename', models.CharField(blank=True, max_length=50, null=True, verbose_name='访华照片文件名')),
                ('sample_notes', models.TextField(blank=True, null=True, verbose_name='样本备注信息')),
                ('record_by_who', models.CharField(blank=True, max_length=50, null=True, verbose_name='记录添加人')),
                ('record_datetime', models.DateTimeField(auto_now_add=True, verbose_name='记录添加时间')),
            ],
            options={
                'verbose_name': '蜜蜂样本总表',
                'verbose_name_plural': '蜜蜂样本总表',
            },
        ),
        migrations.CreateModel(
            name='SampleSummary',
            fields=[
            ],
            options={
                'verbose_name': '蜜蜂样本统计',
                'verbose_name_plural': '蜜蜂样本统计',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('sample.sample',),
        ),
    ]
